name: Restaurant-Order-System
on:
  push:
    branches:
      - main
jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]

    steps:
      - uses: actions/checkout@v2
      - uses: browser-actions/setup-chrome@latest
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache node modules
        id: cache-nodemodules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # caching node_modules
          path: node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Install Dependencies
        run: |
          cd ruoyi-ui
          npm install
        # npm install is-mergeable-object
        # npm update deepmerge

      - name: Update types to latest
        run: |
          npm install --save-dev @types/node@latest --force
      
      # - name: Test
      #   run: |
      #     npm run build:stage
          
      - name: Conventional Changelog Action
        id: changelog
        uses: TriPSs/conventional-changelog-action@v3
        with:
          github-token: ${{ secrets.DEVOPS }}
          output-file: "false"

      - name: Create Release
        uses: actions/create-release@v1
        if: ${{ steps.changelog.outputs.skipped == 'false' }}
        env:
          GITHUB_TOKEN: ${{ secrets.DEVOPS }}
        with:
          tag_name: ${{ steps.changelog.outputs.tag }}
          release_name: ${{ steps.changelog.outputs.tag }}
          body: ${{ steps.changelog.outputs.clean_changelog }}

      - name: Build with Vuejs
        run: |
          cd ruoyi-ui
          npm run build:prod
          echo "begin copy html "
          cp -r ../ruoyi-ui/dist/** ../docker/nginx/html/dist

      - name: Build with Maven
        run: |
          mvn clean package
          cd docker
          chmod +x ./copy.sh
          ./copy.sh
          
      - name: Setup SSH and SCP
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H "$EC2_HOST" >> ~/.ssh/known_hosts
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          EC2_HOST: ${{ secrets.EC2_HOST }}

      - name: Copy Docker folder to EC2
        run:
          scp -r ./docker ubuntu@$EC2_HOST:/home/ubuntu
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
    
